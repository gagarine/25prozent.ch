<?php
/**
 * @file
 * Code for the pc_vote feature.
 */

include_once 'pc_vote.features.inc';

/**
 * hook_form_FORM_ID_alter
 *
 * @param $form
 * @param $form_state
 */
function pc_vote_form_node_form_alter(&$form, $form_state) {

  // if you are targeting a specific content type then
  // you can access the type:
  $type = $form['#node']->type;

  if ($type == 'vote') {
    // Adapt the number of allowed of vote depending of the user canton
    global $user;
    $user_entity = user_load($user->uid);
    $canton_tid = field_get_items('user',$user_entity, 'field_taxo_canton')[0]['tid'];

    $canton_term_entity = taxonomy_term_load($canton_tid);

    if($canton_term_entity === false){
      throw new \Exception("Taxonomy term " . $canton_tid . " not found");
    }

    $canton_slug = field_get_items('taxonomy_term',$canton_term_entity, 'field_slug')[0]['value'];

    $allowed_nbr_vote = pc_vote_get_number_seats($canton_slug);
    $max_delta = $form['field_candidats'][LANGUAGE_NONE]['#max_delta'];

    for($i = 0; $i <= $max_delta; $i++){
      if($i >= $allowed_nbr_vote){
        unset($form['field_candidats'][LANGUAGE_NONE][$i]);
      }
    }

    // check if we have a list in param
    // Set the value to this list id or remove the field
    $listID = false;
    if(isset($_GET['listid']) && is_numeric($_GET['listid']) && (int) $_GET['listid'] !== 0) {
      $listID = $_GET['listid'];
      $form['field_list'][LANGUAGE_NONE]['#default_value'] = $listID;
      $form['field_list']['#disabled'] = TRUE;
    } else {
      unset($form['field_list']);
    }

    // If we do have a list, load the candidats
    if($listID){
      $candidats = get_candidats($listID, $canton_tid);
      $field_key = 0;
      foreach($candidats as $candidat){
        $form['field_candidats'][LANGUAGE_NONE][$field_key]['target_id']['#default_value'] = $candidat->title . ' (' . $candidat->nid .')';
        $field_key++;
      }
    }

  }
}

/**
 * Get politicians from a list
 *
 * @param $listID
 * @param $userCantonTid
 * @return array
 * @throws \EntityFieldQueryException
 */
function get_candidats($listID, $userCantonTid){
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'politician')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_list', 'tid', $listID)
    // Do not load politician if their are from another canton
    ->fieldCondition('field_taxo_canton', 'tid', $userCantonTid)
    ->fieldOrderBy('field_list_place_1', 'value', 'ASC')
    ->range(0, 40);

  $result = $query->execute();
  if (!isset($result['node'])) {
    return array();
  }
  $candidat_nids = array_keys($result['node']);
  $candidat = entity_load('node', $candidat_nids);

  return $candidat;
}

// FIXME validate the number of vote


function pc_vote_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Increase the max cardinality to 50
  $range = drupal_map_assoc(range(1, 50));
  $new_options =  array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + $range;

  // Change the options
  $form['field']['cardinality']['#options'] = $new_options;
}

/**
 * The number of siege for a given canton
 *
 * @param $canton (two letters abreviation)
 */
function pc_vote_get_number_seats($canton){
  $siege_by_canton = array(
    'AG' => 16,
    'AR' => 1,
    'AI' => 1,
    'BL' => 7,
    'BS' => 5,
    'BE' => 25,
    'FR' => 7,
    'GE' => 11,
    'GL' => 1,
    'GR' => 5,
    'JU' => 2,
    'LU' => 10,
    'NE' => 4,
  	'NW' => 1,
    'OW' => 1,
    'SG' => 12,
    'SH' => 2,
    'SZ' => 4,
    'SO' => 6,
    'TG' => 6,
    'TI' => 8,
    'UR' => 1,
    'VD' => 18,
    'VS' => 8,
    'ZH' => 35,
    'ZG' => 3,);

  if(empty($siege_by_canton[$canton])) {
    return false;
  }

  return $siege_by_canton[$canton];

}